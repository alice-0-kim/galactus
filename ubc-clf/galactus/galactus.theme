<?php

/**
 * @file
 * Functions to support theming in the galactus theme.
 */

/**
 * Implements hook_page_attachments_alter().
 */
function galactus_page_attachments_alter(array &$page) {
  $use_local_clf = theme_get_setting('clf_override');
  $clf_theme_color = theme_get_setting('clf_theme_colour');
  $clf_layout = theme_get_setting('clf_layout');

  // Switch between locally hosted CLF libraries.
  if ($use_local_clf) {
    $clf_layout_id = $clf_layout ? 'sw' : 'fw';
    $page['#attached']['library'][] = 'galactus/local-clf-fixes';
    $page['#attached']['library'][] = 'galactus/clf-' . $clf_layout_id . '-' . $clf_theme_color;
  }
  else {
    // Switch between CDN hosted CLF libraries.
    $page['#attached']['library'][] = 'galactus/clf-cdn-fw-' . $clf_theme_color;
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function galactus_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured'])) {
    $variables['attributes']['class'][] = 'featured';
  }

  // add in custom theme variables so they are available in html.twig
  $variables['color_option'] = theme_get_setting('clf_theme_colour');
  $variables['layout_option2'] = theme_get_setting('clf_layout');
  $variables['local_clf'] = theme_get_setting('clf_override');
  $variables['unuglify'] = theme_get_setting('unuglify') ? TRUE : FALSE;
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function galactus_preprocess_page(&$variables) {
  // Set the options that apply to both page and maintenance page.
  //_galactus_process_page($variables);

  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }

  // add in our custom theme variables so we can use them in page.twig
  // general options
  $variables['layout_option'] = theme_get_setting('clf_layout');
  $variables['mobilenav_option'] = theme_get_setting('clf_navoption') ? FALSE : TRUE;
  $variables['campus_option'] = theme_get_setting('clf_unit_campus');
  $variables['faculty_option'] = theme_get_setting('clf_faculty') ? FALSE : TRUE;
  $variables['faculty_name'] = theme_get_setting('clf_faculty_name');
  $variables['unit_name'] = theme_get_setting('clf_unitname');
  //$variables['breadcrumb_option'] = theme_get_setting('breadcrumb_name') ? TRUE : FALSE;

  // search options
  $variables['searchlabel_option'] = theme_get_setting('clf_searchlabel');
  $variables['searchdomain_option'] = theme_get_setting('clf_searchdomain');
  //$variables['searchoverride_option'] = theme_get_setting('clf_subunit_override');

  // footer options
  $variables['address_option'] = theme_get_setting('clf_streetaddr');
  $variables['locality_option'] = theme_get_setting('clf_locality');
  $variables['region_option'] = theme_get_setting('clf_region');
  $variables['country_option'] = theme_get_setting('clf_country');
  $variables['postal_option'] = theme_get_setting('clf_postal');
  $variables['phone_option'] = theme_get_setting('clf_telephone');
  $variables['fax_option'] = theme_get_setting('clf_fax');
  $variables['email_option'] = theme_get_setting('clf_email');
  $variables['website_option'] = theme_get_setting('clf_website');

  // social media options
  $variables['facebook_option'] = theme_get_setting('clf_social_facebook');
  $variables['twitter_option'] = theme_get_setting('clf_social_twitter');
  $variables['linkedin_option'] = theme_get_setting('clf_social_linkedin');
  $variables['googleplus_option'] = theme_get_setting('clf_social_googleplus');
  $variables['youtube_option'] = theme_get_setting('clf_social_youtube');

}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function galactus_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // galactus has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'galactus/maintenance_page';

  // Set the options that apply to both page and maintenance page.
  _galactus_process_page($variables);
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function galactus_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }

  // Add node--node_type--view_mode.html.twig suggestions
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['elements']['#node']->bundle() . '__' . $variables['view_mode'];

  // Add node--view_mode.html.twig suggestions
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function galactus_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function galactus_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 *
 * @see template_preprocess_field()
 */
function galactus_preprocess_field(&$variables) {
  $element = $variables['element'];
  if ($element['#field_type'] == 'taxonomy_term_reference') {
    $variables['title_attributes']['class'][] = 'field-label';
    if ($variables['element']['#label_display'] == 'inline') {
      $variables['title_attributes']['class'][] = 'inline';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page.html.twig.
 */
function galactus_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Get current node
  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    // Add the Node Type as a template suggestion
    if ($node->getType()) {
      $suggestions[] = 'page__' . 'node_type' . '__' . $node->getType();
    }
  }
}
